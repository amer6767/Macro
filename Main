-- Roblox Macro V2 (SQUARE GUI | SCROLLABLE | MOBILE-FIXED | NO CONSOLE ERRORS)
-- LocalScript in StarterPlayerScripts or StarterGui

local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local StarterGui = game:GetService("StarterGui")
local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")
local workspace = workspace

-- Config
local MIN_CLICK_HOLD_DURATION = 0.05
local FONT_MAIN = Enum.Font.Gotham
local FONT_BOLD = Enum.Font.GothamBold
local SWIPE_MIN_PIXELS = 8

-- Limits
local MIN_CLICK_INTERVAL = 0.01
local MAX_CLICK_INTERVAL = 10.0
local MIN_REPLAY_COUNT = 1
local MAX_REPLAY_COUNT = 10000

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- State
local autoClickEnabled = false
local clickInterval = 0.2
local clickPosition = Vector2.new(300, 300)
local waitingForPosition = false

local isRecording = false
local recordedActions = {}
local recordStartTime = 0

local isReplaying = false
local replayCount = 1
local currentReplayThread = nil

local isReplayingLoop = false
local currentReplayLoopThread = nil

local activeXOffsetRaw = { mode = "px", value = 0 }
local activeYOffsetRaw = { mode = "px", value = 0 }

local guiHidden = false

-- task shim
if not task or not task.spawn then
    task = {
        spawn = function(func)
            local co = coroutine.create(func)
            coroutine.resume(co)
            return co
        end,
        wait = function(time)
            local start = tick()
            while tick() - start < (time or 0) do
                RunService.Heartbeat:Wait()
            end
        end,
        delay = function(time, func)
            task.spawn(function()
                task.wait(time)
                func()
            end)
        end,
        cancel = function(co) end
    }
end

-- UI Creation (SQUARE + SCROLLABLE)
local mainGui = Instance.new("ScreenGui")
mainGui.Name = "MacroV2GUI"
mainGui.IgnoreGuiInset = true
mainGui.ResetOnSpawn = false
mainGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
mainGui.Parent = playerGui

-- Main Frame - Square & Centered
local mainFrame = Instance.new("Frame", mainGui)
mainFrame.Size = UDim2.new(0, 300, 0, 300)
mainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
mainFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
mainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
mainFrame.BorderSizePixel = 0
mainFrame.ClipsDescendants = true
mainFrame.Visible = true
local frameCorner = Instance.new("UICorner", mainFrame)
frameCorner.CornerRadius = UDim.new(0, 16)

-- Scrollable Content
local scrollFrame = Instance.new("ScrollingFrame", mainFrame)
scrollFrame.Size = UDim2.new(1, 0, 1, 0)
scrollFrame.BackgroundTransparency = 1
scrollFrame.ScrollBarThickness = 6
scrollFrame.ScrollBarImageColor3 = Color3.fromRGB(100, 100, 100)
scrollFrame.CanvasSize = UDim2.new(0, 0, 0, 800)

local contentLayout = Instance.new("UIListLayout", scrollFrame)
contentLayout.Padding = UDim.new(0, 8)
contentLayout.SortOrder = Enum.SortOrder.LayoutOrder

-- Title
local title = Instance.new("TextLabel", scrollFrame)
title.Size = UDim2.new(1, 0, 0, 40)
title.BackgroundTransparency = 1
title.Text = "Macro V2"
title.TextColor3 = Color3.fromRGB(255, 255, 255)
title.Font = FONT_BOLD
title.TextSize = 22
title.LayoutOrder = 1

-- Tab Buttons
local function createTab(text, layoutOrder, callback)
    local btn = Instance.new("TextButton")
    btn.Size = UDim2.new(0.9, 0, 0, 35)
    btn.Position = UDim2.new(0.05, 0, 0, 0)
    btn.Text = text
    btn.Font = FONT_MAIN
    btn.TextSize = 16
    btn.TextColor3 = Color3.new(1, 1, 1)
    btn.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    btn.Parent = scrollFrame
    btn.LayoutOrder = layoutOrder
    local corner = Instance.new("UICorner", btn)
    corner.CornerRadius = UDim.new(0, 8)
    if callback then btn.MouseButton1Click:Connect(callback) end
    return btn
end

local tabAuto = createTab("Auto Clicker", 2)
local tabRecord = createTab("Record", 3)
local tabSettings = createTab("Settings", 4)

-- Auto Section
local autoSection = Instance.new("Frame", scrollFrame)
autoSection.Size = UDim2.new(1, 0, 0, 150)
autoSection.BackgroundTransparency = 1
autoSection.LayoutOrder = 5
autoSection.Visible = true

local btnAutoToggle = Instance.new("TextButton", autoSection)
btnAutoToggle.Size = UDim2.new(0.9, 0, 0, 40)
btnAutoToggle.Position = UDim2.new(0.05, 0, 0, 10)
btnAutoToggle.Text = "Auto Clicker: OFF"
btnAutoToggle.Font = FONT_MAIN
btnAutoToggle.TextSize = 18
btnAutoToggle.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
local autoCorner = Instance.new("UICorner", btnAutoToggle)
autoCorner.CornerRadius = UDim.new(0, 8)

local btnSetPos = Instance.new("TextButton", autoSection)
btnSetPos.Size = UDim2.new(0.9, 0, 0, 40)
btnSetPos.Position = UDim2.new(0.05, 0, 0, 60)
btnSetPos.Text = "Set Position"
btnSetPos.Font = FONT_MAIN
btnSetPos.TextSize = 18
btnSetPos.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
local posCorner = Instance.new("UICorner", btnSetPos)
posCorner.CornerRadius = UDim.new(0, 8)

local intervalInput = Instance.new("TextBox", autoSection)
intervalInput.Size = UDim2.new(0.9, 0, 0, 40)
intervalInput.Position = UDim2.new(0.05, 0, 0, 110)
intervalInput.PlaceholderText = "Interval (sec)"
intervalInput.Text = "0.2"
intervalInput.Font = FONT_MAIN
intervalInput.TextSize = 18
intervalInput.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
local intCorner = Instance.new("UICorner", intervalInput)
intCorner.CornerRadius = UDim.new(0, 8)

-- Record Section
local recordSection = Instance.new("Frame", scrollFrame)
recordSection.Size = UDim2.new(1, 0, 0, 300)
recordSection.BackgroundTransparency = 1
recordSection.LayoutOrder = 6
recordSection.Visible = false

local btnStartRec = Instance.new("TextButton", recordSection)
btnStartRec.Size = UDim2.new(0.9, 0, 0, 40)
btnStartRec.Position = UDim2.new(0.05, 0, 0, 10)
btnStartRec.Text = "Start Recording"
btnStartRec.Font = FONT_MAIN
btnStartRec.TextSize = 18
btnStartRec.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
local recCorner = Instance.new("UICorner", btnStartRec)
recCorner.CornerRadius = UDim.new(0, 8)

local btnReplay = Instance.new("TextButton", recordSection)
btnReplay.Size = UDim2.new(0.9, 0, 0, 40)
btnReplay.Position = UDim2.new(0.05, 0, 0, 60)
btnReplay.Text = "Replay Clicks"
btnReplay.Font = FONT_MAIN
btnReplay.TextSize = 18
btnReplay.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
local repCorner = Instance.new("UICorner", btnReplay)
repCorner.CornerRadius = UDim.new(0, 8)

local btnLoop = Instance.new("TextButton", recordSection)
btnLoop.Size = UDim2.new(0.9, 0, 0, 40)
btnLoop.Position = UDim2.new(0.05, 0, 0, 110)
btnLoop.Text = "Replay Loop: OFF"
btnLoop.Font = FONT_MAIN
btnLoop.TextSize = 18
btnLoop.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
local loopCorner = Instance.new("UICorner", btnLoop)
loopCorner.CornerRadius = UDim.new(0, 8)

local btnClear = Instance.new("TextButton", recordSection)
btnClear.Size = UDim2.new(0.9, 0, 0, 40)
btnClear.Position = UDim2.new(0.05, 0, 0, 160)
btnClear.Text = "Clear Recording"
btnClear.Font = FONT_MAIN
btnClear.TextSize = 18
btnClear.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
local clearCorner = Instance.new("UICorner", btnClear)
clearCorner.CornerRadius = UDim.new(0, 8)

local btnExport = Instance.new("TextButton", recordSection)
btnExport.Size = UDim2.new(0.9, 0, 0, 40)
btnExport.Position = UDim2.new(0.05, 0, 0, 210)
btnExport.Text = "Export Recording"
btnExport.Font = FONT_MAIN
btnExport.TextSize = 18
btnExport.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
local expCorner = Instance.new("UICorner", btnExport)
expCorner.CornerRadius = UDim.new(0, 8)

local replayCountInput = Instance.new("TextBox", recordSection)
replayCountInput.Size = UDim2.new(0.9, 0, 0, 40)
replayCountInput.Position = UDim2.new(0.05, 0, 0, 260)
replayCountInput.PlaceholderText = "Replay Count"
replayCountInput.Text = "1"
replayCountInput.Font = FONT_MAIN
replayCountInput.TextSize = 18
replayCountInput.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
local rcCorner = Instance.new("UICorner", replayCountInput)
rcCorner.CornerRadius = UDim.new(0, 8)

-- Settings Section
local settingsSection = Instance.new("Frame", scrollFrame)
settingsSection.Size = UDim2.new(1, 0, 0, 200)
settingsSection.BackgroundTransparency = 1
settingsSection.LayoutOrder = 7
settingsSection.Visible = false

local offsetXInput = Instance.new("TextBox", settingsSection)
offsetXInput.Size = UDim2.new(0.9, 0, 0, 40)
offsetXInput.Position = UDim2.new(0.05, 0, 0, 10)
offsetXInput.PlaceholderText = "X Offset (px or %)"
offsetXInput.Text = "0"
offsetXInput.Font = FONT_MAIN
offsetXInput.TextSize = 18
offsetXInput.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
local oxCorner = Instance.new("UICorner", offsetXInput)
oxCorner.CornerRadius = UDim.new(0, 8)

local offsetYInput = Instance.new("TextBox", settingsSection)
offsetYInput.Size = UDim2.new(0.9, 0, 0, 40)
offsetYInput.Position = UDim2.new(0.05, 0, 0, 60)
offsetYInput.PlaceholderText = "Y Offset (px or %)"
offsetYInput.Text = "0"
offsetYInput.Font = FONT_MAIN
offsetYInput.TextSize = 18
offsetYInput.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
local oyCorner = Instance.new("UICorner", offsetYInput)
oyCorner.CornerRadius = UDim.new(0, 8)

local btnApply = Instance.new("TextButton", settingsSection)
btnApply.Size = UDim2.new(0.9, 0, 0, 40)
btnApply.Position = UDim2.new(0.05, 0, 0, 110)
btnApply.Text = "Apply Settings"
btnApply.Font = FONT_MAIN
btnApply.TextSize = 18
btnApply.BackgroundColor3 = Color3.fromRGB(0, 120, 255)
local applyCorner = Instance.new("UICorner", btnApply)
applyCorner.CornerRadius = UDim.new(0, 8)

-- Toggle Button (59px from top)
local toggleGuiBtn = Instance.new("TextButton", mainGui)
toggleGuiBtn.Size = UDim2.new(0, 80, 0, 40)
toggleGuiBtn.Position = UDim2.new(0, 10, 0, 59)
toggleGuiBtn.Text = "Hide"
toggleGuiBtn.Font = FONT_MAIN
toggleGuiBtn.TextSize = 18
toggleGuiBtn.BackgroundColor3 = Color3.fromRGB(0, 120, 255)
toggleGuiBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
toggleGuiBtn.ZIndex = 1000
toggleGuiBtn.Visible = true
local toggleCorner = Instance.new("UICorner", toggleGuiBtn)
toggleCorner.CornerRadius = UDim.new(0, 8)

-- Helpers
local function makeDraggable(guiObject)
    local dragging = false
    local dragStart, startPos

    guiObject.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = guiObject.Position
        end
    end)

    guiObject.InputChanged:Connect(function(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            local delta = input.Position - dragStart
            guiObject.Position = UDim2.new(
                startPos.X.Scale, startPos.X.Offset + delta.X,
                startPos.Y.Scale, startPos.Y.Offset + delta.Y
            )
        end
    end)

    guiObject.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = false
        end
    end)
end

local function sendNotification(title, text)
    pcall(function()
        StarterGui:SetCore("SendNotification", {Title = title, Text = text, Duration = 3})
    end)
end

local function showSection(section)
    autoSection.Visible = section == "auto"
    recordSection.Visible = section == "record"
    settingsSection.Visible = section == "settings"
    scrollFrame.CanvasPosition = Vector2.new(0, 0)
end

-- Tab Logic
tabAuto.MouseButton1Click:Connect(function() showSection("auto") end)
tabRecord.MouseButton1Click:Connect(function() showSection("record") end)
tabSettings.MouseButton1Click:Connect(function() showSection("settings") end)

-- Toggle GUI
toggleGuiBtn.MouseButton1Click:Connect(function()
    guiHidden = not guiHidden
    mainFrame.Visible = not guiHidden
    toggleGuiBtn.Text = guiHidden and "Show" or "Hide"
end)

-- Draggable
makeDraggable(mainFrame)

-- Viewport
local function getViewportSize()
    local cam = workspace.CurrentCamera
    return cam and cam.ViewportSize or Vector2.new(1920, 1080)
    end

local function toNormalized(pos)
    local vs = getViewportSize()
    return Vector2.new(pos.X / vs.X, pos.Y / vs.Y)
end

local function fromNormalized(norm)
    local vs = getViewportSize()
    return Vector2.new(math.clamp(norm.X * vs.X, 0, vs.X), math.clamp(norm.Y * vs.Y, 0, vs.Y))
end

-- Virtual Input (FIXED: Safe calls + nil checks)
local function vmAvailable()
    return VirtualInputManager and typeof(VirtualInputManager.SendMouseButtonEvent) == "function"
end

local function safeSendMouseMove(x, y)
    if vmAvailable() then pcall(function() VirtualInputManager:SendMouseMoveEvent(x, y, game, 0) end) end
end

local function safeSendMouseButton(x, y, down)
    if vmAvailable() then pcall(function() VirtualInputManager:SendMouseButtonEvent(x, y, 0, down, game, 0) end) end
end

-- Simulate Click
local function simulateClick(norm)
    local pos = fromNormalized(norm)
    local x = pos.X + (activeXOffsetRaw.mode == "px" and activeXOffsetRaw.value or activeXOffsetRaw.value * getViewportSize().X)
    local y = pos.Y + (activeYOffsetRaw.mode == "px" and activeYOffsetRaw.value or activeYOffsetRaw.value * getViewportSize().Y)
    safeSendMouseMove(x, y)
    task.wait(0.02)
    safeSendMouseButton(x, y, true)
    task.wait(MIN_CLICK_HOLD_DURATION)
    safeSendMouseButton(x, y, false)
end

-- Auto Clicker
btnAutoToggle.MouseButton1Click:Connect(function()
    autoClickEnabled = not autoClickEnabled
    btnAutoToggle.Text = autoClickEnabled and "Auto Clicker: ON" or "Auto Clicker: OFF"
    if autoClickEnabled then
        task.spawn(function()
            while autoClickEnabled do
                simulateClick(toNormalized(clickPosition))
                task.wait(clickInterval)
            end
        end)
    end
end)

-- Set Position
btnSetPos.MouseButton1Click:Connect(function()
    if waitingForPosition then return end
    waitingForPosition = true
    btnSetPos.Text = "Tap Screen..."
    local conn
    conn = UserInputService.InputBegan:Connect(function(input)
        if not waitingForPosition then return end
        local pos = input.Position
        if playerGui:GetGuiObjectsAtPosition(pos.X, pos.Y)[1] and playerGui:GetGuiObjectsAtPosition(pos.X, pos.Y)[1]:IsDescendantOf(mainGui) then return end
        clickPosition = pos
        waitingForPosition = false
        btnSetPos.Text = "Position Set!"
        conn:Disconnect()
        task.delay(1, function() if btnSetPos.Text == "Position Set!" then btnSetPos.Text = "Set Position" end end)
    end)
end)

-- Recording
local activeInputs = {}
local recordConnections = {}

local function startRecording()
    isRecording = true
    recordedActions = {}
    recordStartTime = os.clock()
    btnStartRec.Text = "Stop Recording"

    recordConnections.began = UserInputService.InputBegan:Connect(function(input)
        if not isRecording then return end
        local ut = input.UserInputType
        if ut ~= Enum.UserInputType.Touch and ut ~= Enum.UserInputType.MouseButton1 then return end
        local pos = input.Position
        local objs = playerGui:GetGuiObjectsAtPosition(pos.X, pos.Y)
        for _, obj in ipairs(objs) do
            if obj:IsDescendantOf(mainGui) then return end
        end
        activeInputs[input] = { startTime = os.clock(), startPos = pos }
    end)

    recordConnections.ended = UserInputService.InputEnded:Connect(function(input)
        if not isRecording or not activeInputs[input] then return end
        local data = activeInputs[input]
        local now = os.clock()
        local delay = now - recordStartTime
        recordStartTime = now
        local endPos = input.Position or data.startPos
        local moved = (endPos - data.startPos).Magnitude

        if moved >= SWIPE_MIN_PIXELS then
            table.insert(recordedActions, {
                type = "swipe",
                startNorm = toNormalized(data.startPos),
                endNorm = toNormalized(endPos),
                duration = now - data.startTime,
                delay = delay
            })
        else
            table.insert(recordedActions, {
                type = "tap",
                norm = toNormalized(data.startPos),
                delay = delay
            })
        end
        activeInputs[input] = nil
    end)
end

local function stopRecording()
    isRecording = false
    btnStartRec.Text = "Start Recording"
    for _, conn in pairs(recordConnections) do if conn.Connected then conn:Disconnect() end end
    recordConnections = {}
end

btnStartRec.MouseButton1Click:Connect(function()
    if isRecording then stopRecording() else startRecording() end
end)

-- Replay
btnReplay.MouseButton1Click:Connect(function()
    if isReplaying then
        isReplaying = false
        btnReplay.Text = "Replay Clicks"
        if currentReplayThread then task.cancel(currentReplayThread) end
        return
    end
    if #recordedActions == 0 then sendNotification("Empty", "Record first"); return end
    isReplaying = true
    local count = tonumber(replayCountInput.Text) or 1
    btnReplay.Text = "Stop Replay"
    currentReplayThread = task.spawn(function()
        for i = 1, count do
            if not isReplaying then break end
            for _, act in ipairs(recordedActions) do
                if not isReplaying then break end
                if act.delay then task.wait(act.delay) end
                if act.type == "tap" then
                    simulateClick(act.norm)
                end
            end
        end
        isReplaying = false
        btnReplay.Text = "Replay Clicks"
    end)
end)

-- Loop
btnLoop.MouseButton1Click:Connect(function()
    isReplayingLoop = not isReplayingLoop
    btnLoop.Text = isReplayingLoop and "Replay Loop: ON" or "Replay Loop: OFF"
    if isReplayingLoop then
        currentReplayLoopThread = task.spawn(function()
            while isReplayingLoop do
                for _, act in ipairs(recordedActions) do
                    if not isReplayingLoop then break end
                    if act.delay then task.wait(act.delay) end
                    if act.type == "tap" then simulateClick(act.norm) end
                end
                task.wait(0.1)
            end
        end)
    else
        if currentReplayLoopThread then task.cancel(currentReplayLoopThread) end
    end
end)

-- Clear
btnClear.MouseButton1Click:Connect(function()
    recordedActions = {}
    sendNotification("Cleared", "Recording reset")
end)

-- Export
btnExport.MouseButton1Click:Connect(function()
    if #recordedActions == 0 then sendNotification("Empty", "No actions"); return end
    local data = HttpService:JSONEncode({ actions = recordedActions })
    if setclipboard then setclipboard(data); sendNotification("Copied", "JSON to clipboard") end
end)

-- Apply Offsets
btnApply.MouseButton1Click:Connect(function()
    local function parse(text)
        text = text:gsub("%%", ""):gsub("%s+", "")
        if text:find("%%$") then
            return { mode = "pct", value = tonumber(text:sub(1, -2)) / 100 }
        else
            return { mode = "px", value = tonumber(text) }
        end
    end
    local x = parse(offsetXInput.Text)
    local y = parse(offsetYInput.Text)
    if x and y then
        activeXOffsetRaw = x
        activeYOffsetRaw = y
        sendNotification("Applied", "Offsets updated")
    else
        sendNotification("Error", "Invalid input")
    end
end)

-- Interval Update
intervalInput.FocusLost:Connect(function()
    local val = tonumber(intervalInput.Text)
    if val and val >= MIN_CLICK_INTERVAL and val <= MAX_CLICK_INTERVAL then
        clickInterval = val
    else
        intervalInput.Text = tostring(clickInterval)
    end
end)

-- Start
showSection("auto")
sendNotification("Macro V2", "Square GUI + Scroll + Fixed!")
            